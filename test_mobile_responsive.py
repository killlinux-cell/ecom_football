#!/usr/bin/env python3
"""
Script de test pour v√©rifier la responsivit√© mobile du site e-commerce
"""

import os
import sys
import django
from django.conf import settings
from django.test import TestCase, Client
from django.urls import reverse

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

class MobileResponsiveTest(TestCase):
    """Tests pour v√©rifier la responsivit√© mobile"""
    
    def setUp(self):
        """Configuration initiale"""
        self.client = Client()
        
    def test_mobile_css_loaded(self):
        """V√©rifier que le CSS mobile est charg√©"""
        response = self.client.get(reverse('products:home'))
        self.assertContains(response, 'mobile.css')
        print("‚úÖ CSS mobile charg√© correctement")
        
    def test_mobile_navigation(self):
        """V√©rifier la navigation mobile"""
        response = self.client.get(reverse('products:home'))
        
        # V√©rifier la pr√©sence du bouton hamburger
        self.assertContains(response, 'navbar-toggler')
        print("‚úÖ Navigation mobile pr√©sente")
        
        # V√©rifier les fonctionnalit√©s JavaScript
        self.assertContains(response, 'initMobileFeatures')
        print("‚úÖ Fonctionnalit√©s JavaScript mobiles pr√©sentes")
        
    def test_product_list_mobile(self):
        """V√©rifier la liste des produits sur mobile"""
        response = self.client.get(reverse('products:product_list'))
        
        # V√©rifier les classes responsive
        self.assertContains(response, 'col-lg-4 col-md-6 col-sm-6 col-12')
        print("‚úÖ Grille responsive des produits configur√©e")
        
        # V√©rifier le bouton filtres mobile
        self.assertContains(response, 'd-lg-none')
        print("‚úÖ Bouton filtres mobile pr√©sent")
        
    def test_cart_mobile(self):
        """V√©rifier le panier sur mobile"""
        response = self.client.get(reverse('cart:cart_detail'))
        
        # V√©rifier que la page du panier se charge
        self.assertEqual(response.status_code, 200)
        print("‚úÖ Page panier accessible")
        
        # V√©rifier la structure de base du panier
        self.assertContains(response, 'Mon Panier')
        print("‚úÖ Structure panier mobile pr√©sente")
        
        # V√©rifier les classes CSS (m√™me si panier vide)
        if 'cart-item' in response.content.decode():
            print("‚úÖ Classes CSS du panier mobile pr√©sentes")
        else:
            print("‚ÑπÔ∏è  Panier vide - classes CSS seront pr√©sentes avec des articles")
        
    def test_mobile_viewport_meta(self):
        """V√©rifier la balise viewport pour mobile"""
        response = self.client.get(reverse('products:home'))
        self.assertContains(response, 'width=device-width, initial-scale=1.0')
        print("‚úÖ Balise viewport mobile configur√©e")
        
    def test_bootstrap_responsive(self):
        """V√©rifier que Bootstrap est charg√©"""
        response = self.client.get(reverse('products:home'))
        self.assertContains(response, 'bootstrap@5.3.0')
        print("‚úÖ Bootstrap 5 charg√© pour la responsivit√©")

def run_mobile_tests():
    """Ex√©cuter tous les tests mobiles"""
    print("üß™ Test de la responsivit√© mobile du site e-commerce")
    print("=" * 50)
    
    try:
        # Cr√©er une instance de test
        test_instance = MobileResponsiveTest()
        test_instance.setUp()
        
        # Ex√©cuter les tests
        test_instance.test_mobile_css_loaded()
        test_instance.test_mobile_navigation()
        test_instance.test_product_list_mobile()
        test_instance.test_cart_mobile()
        test_instance.test_mobile_viewport_meta()
        test_instance.test_bootstrap_responsive()
        
        print("\n" + "=" * 50)
        print("‚úÖ Tous les tests mobiles sont pass√©s avec succ√®s !")
        print("üì± Votre site est maintenant optimis√© pour mobile")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests : {e}")
        return False

if __name__ == "__main__":
    success = run_mobile_tests()
    sys.exit(0 if success else 1)
