#!/usr/bin/env python
"""
Script pour corriger toutes les incoh√©rences de totaux dans les commandes
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

def corriger_toutes_les_commandes():
    """Corriger toutes les commandes avec des incoh√©rences"""
    print("üîß CORRECTION DE TOUTES LES COMMANDES INCOH√âRENTES")
    print("=" * 60)
    
    try:
        from orders.models import Order
        from decimal import Decimal
        
        orders = Order.objects.all()
        print(f"üìä {orders.count()} commandes √† v√©rifier")
        
        corrig√©es = 0
        incoh√©rentes = 0
        
        for order in orders:
            # Calculer le total √† partir des articles
            total_articles = sum(item.total_price for item in order.items.all())
            
            # V√©rifier l'incoh√©rence
            if abs(total_articles - order.subtotal) > 0.01:  # Tol√©rance de 1 centime
                incoh√©rentes += 1
                print(f"\n‚ö†Ô∏è Commande {order.order_number}:")
                print(f"   - Sous-total enregistr√©: {order.subtotal} FCFA")
                print(f"   - Total articles: {total_articles} FCFA")
                print(f"   - Diff√©rence: {total_articles - order.subtotal} FCFA")
                
                # Corriger la commande
                old_subtotal = order.subtotal
                old_total = order.total
                
                order.subtotal = total_articles
                order.total = total_articles + order.shipping_cost
                order.save()
                
                print(f"   ‚úÖ Corrig√©e:")
                print(f"      - Nouveau sous-total: {order.subtotal} FCFA")
                print(f"      - Nouveau total: {order.total} FCFA")
                
                corrig√©es += 1
        
        print(f"\nüìä R√âSUM√â DE LA CORRECTION:")
        print(f"   - Commandes v√©rifi√©es: {orders.count()}")
        print(f"   - Commandes incoh√©rentes: {incoh√©rentes}")
        print(f"   - Commandes corrig√©es: {corrig√©es}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def analyser_commande_exemple():
    """Analyser une commande d'exemple pour comprendre le probl√®me"""
    print("\nüîç ANALYSE D'UNE COMMANDE D'EXEMPLE")
    print("=" * 60)
    
    try:
        from orders.models import Order
        
        # Prendre la premi√®re commande incoh√©rente
        orders = Order.objects.all()
        for order in orders:
            total_articles = sum(item.total_price for item in order.items.all())
            if abs(total_articles - order.subtotal) > 0.01:
                print(f"üìã Commande analys√©e: {order.order_number}")
                print(f"   - Date: {order.created_at}")
                print(f"   - Utilisateur: {order.user.username}")
                print(f"   - Sous-total: {order.subtotal} FCFA")
                print(f"   - Total articles: {total_articles} FCFA")
                print(f"   - Nombre d'articles: {order.items.count()}")
                
                # Analyser les articles
                if order.items.count() == 0:
                    print(f"   ‚ö†Ô∏è PROBL√àME: Aucun article dans la commande!")
                    print(f"      Cela sugg√®re que les articles ont √©t√© supprim√©s")
                    print(f"      apr√®s la cr√©ation de la commande.")
                else:
                    print(f"   üì¶ Articles pr√©sents:")
                    for item in order.items.all():
                        print(f"      - {item.product_name}: {item.total_price} FCFA")
                
                break
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {str(e)}")
        return False

def pr√©venir_le_probl√®me():
    """Sugg√©rer des solutions pour pr√©venir le probl√®me"""
    print("\nüí° SOLUTIONS POUR PR√âVENIR LE PROBL√àME")
    print("=" * 60)
    
    print("üîß Solutions recommand√©es:")
    print("   1. V√©rification des totaux lors de la cr√©ation de commande")
    print("   2. Recalcul automatique des totaux si articles supprim√©s")
    print("   3. Validation des donn√©es avant sauvegarde")
    print("   4. Logs des modifications de commandes")
    
    print("\nüìã Modifications de code sugg√©r√©es:")
    print("   1. Dans orders/views.py - V√©rifier la coh√©rence avant sauvegarde")
    print("   2. Dans orders/models.py - Ajouter une m√©thode de validation")
    print("   3. Cr√©er une commande de maintenance pour recalculer les totaux")
    
    return True

def main():
    """Fonction principale"""
    print("üîç DIAGNOSTIC ET CORRECTION DES INCOH√âRENCES DE TOTAUX")
    print("=" * 70)
    
    # Analyser une commande d'exemple
    analyser_commande_exemple()
    
    # Corriger toutes les commandes
    print("\n" + "="*70)
    response = input("Voulez-vous corriger toutes les commandes incoh√©rentes? (y/n): ")
    if response.lower() == 'y':
        corriger_toutes_les_commandes()
    
    # Sugg√©rer des solutions
    pr√©venir_le_probl√®me()
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
