#!/usr/bin/env python
"""
Script de diagnostic pour les emails sur le VPS
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

def diagnostic_complet():
    """Diagnostic complet du syst√®me d'emails"""
    print("üîç DIAGNOSTIC COMPLET DU SYST√àME D'EMAILS")
    print("=" * 60)
    
    # 1. V√©rifier les mod√®les
    print("\nüìã 1. V√©rification des mod√®les...")
    try:
        from notifications.models import EmailTemplate, EmailSettings, EmailLog
        print("‚úÖ Mod√®les import√©s avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import mod√®les: {e}")
        return False
    
    # 2. V√©rifier les templates
    print("\nüìß 2. V√©rification des templates d'emails...")
    try:
        templates = EmailTemplate.objects.all()
        print(f"üìä {templates.count()} templates trouv√©s:")
        
        required_types = [
            'order_confirmation',
            'payment_confirmation', 
            'order_shipped',
            'order_delivered',
            'cart_reminder',
            'stock_alert'
        ]
        
        for template_type in required_types:
            template = EmailTemplate.objects.filter(
                template_type=template_type,
                is_active=True
            ).first()
            
            if template:
                print(f"   ‚úÖ {template_type}: {template.name}")
            else:
                print(f"   ‚ùå {template_type}: MANQUANT")
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification templates: {e}")
        return False
    
    # 3. V√©rifier les param√®tres SMTP
    print("\n‚öôÔ∏è 3. V√©rification des param√®tres SMTP...")
    try:
        settings = EmailSettings.objects.first()
        if settings:
            print(f"‚úÖ Param√®tres trouv√©s:")
            print(f"   - Email exp√©diteur: {settings.from_email}")
            print(f"   - Nom exp√©diteur: {settings.from_name}")
            print(f"   - SMTP Host: {settings.smtp_host}")
            print(f"   - SMTP Port: {settings.smtp_port}")
            print(f"   - TLS activ√©: {'Oui' if settings.use_tls else 'Non'}")
            print(f"   - Statut: {'‚úÖ Actif' if settings.is_active else '‚ùå Inactif'}")
        else:
            print("‚ùå Aucun param√®tre SMTP configur√©")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification param√®tres: {e}")
    
    # 4. V√©rifier le service d'emails
    print("\nüîß 4. V√©rification du service d'emails...")
    try:
        from notifications.email_service import get_email_service
        service = get_email_service()
        
        if service.settings:
            print("‚úÖ Service d'emails initialis√©")
            print(f"   - Param√®tres charg√©s: Oui")
            print(f"   - Statut: {'Actif' if service.settings.is_active else 'Inactif'}")
        else:
            print("‚ö†Ô∏è Service d'emails initialis√© mais sans param√®tres")
    except Exception as e:
        print(f"‚ùå Erreur service d'emails: {e}")
    
    # 5. V√©rifier les logs d'emails
    print("\nüìù 5. V√©rification des logs d'emails...")
    try:
        logs = EmailLog.objects.all()
        print(f"üìä {logs.count()} logs d'emails trouv√©s")
        
        if logs.exists():
            recent_logs = logs.order_by('-created_at')[:5]
            print("   Derniers envois:")
            for log in recent_logs:
                status_icon = "‚úÖ" if log.status == 'sent' else "‚ùå" if log.status == 'failed' else "‚è≥"
                print(f"   {status_icon} {log.created_at.strftime('%d/%m/%Y %H:%M')} - {log.recipient_email} - {log.status}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification logs: {e}")
    
    # 6. Test de rendu de template
    print("\nüé® 6. Test de rendu de template...")
    try:
        template = EmailTemplate.objects.filter(
            template_type='order_confirmation',
            is_active=True
        ).first()
        
        if template:
            # Test de rendu simple
            from django.template import Template, Context
            test_context = {
                'customer_name': 'Test User',
                'order_number': 'TEST123',
                'order_total': 25000,
            }
            
            try:
                rendered = Template(template.html_content).render(Context(test_context))
                print("‚úÖ Template de confirmation rendu avec succ√®s")
            except Exception as e:
                print(f"‚ùå Erreur rendu template: {e}")
        else:
            print("‚ùå Template de confirmation non trouv√©")
    except Exception as e:
        print(f"‚ùå Erreur test rendu: {e}")
    
    return True

def suggestions_correction():
    """Suggestions de correction"""
    print("\nüí° SUGGESTIONS DE CORRECTION")
    print("=" * 40)
    
    try:
        from notifications.models import EmailTemplate, EmailSettings
        
        # V√©rifier les templates manquants
        required_types = [
            'order_confirmation',
            'payment_confirmation', 
            'order_shipped',
            'order_delivered',
            'cart_reminder',
            'stock_alert'
        ]
        
        missing_templates = []
        for template_type in required_types:
            if not EmailTemplate.objects.filter(template_type=template_type, is_active=True).exists():
                missing_templates.append(template_type)
        
        if missing_templates:
            print("üîß Templates manquants d√©tect√©s:")
            print("   Solution: python manage.py init_email_templates")
            print(f"   Templates √† cr√©er: {', '.join(missing_templates)}")
        
        # V√©rifier les param√®tres SMTP
        if not EmailSettings.objects.exists():
            print("üîß Param√®tres SMTP manquants:")
            print("   Solution: Configurer via /dashboard/emails/settings/")
            print("   Ou cr√©er manuellement dans l'admin Django")
        
        # V√©rifier l'activation
        settings = EmailSettings.objects.first()
        if settings and not settings.is_active:
            print("üîß Service d'emails d√©sactiv√©:")
            print("   Solution: Activer dans /dashboard/emails/settings/")
        
    except Exception as e:
        print(f"‚ùå Erreur suggestions: {e}")

def main():
    """Fonction principale"""
    success = diagnostic_complet()
    suggestions_correction()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ DIAGNOSTIC TERMIN√â")
        print("üìã Consultez les suggestions ci-dessus pour corriger les probl√®mes")
    else:
        print("üí• DIAGNOSTIC √âCHOU√â")
        print("‚ùå Des erreurs critiques ont √©t√© d√©tect√©es")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
