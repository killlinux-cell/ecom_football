#!/usr/bin/env python
"""
Script de v√©rification du syst√®me d'emails
V√©rifie que tout est pr√™t pour le d√©ploiement
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

def check_email_system_ready():
    """V√©rifie que le syst√®me d'emails est pr√™t pour le d√©ploiement"""
    print("üìß V√âRIFICATION DU SYST√àME D'EMAILS")
    print("=" * 50)
    
    all_ready = True
    
    try:
        from notifications.models import EmailSettings, EmailTemplate, EmailLog
        from notifications.email_service import get_email_service
        
        # 1. V√©rifier les mod√®les
        print("1Ô∏è‚É£ V√©rification des mod√®les...")
        try:
            settings_count = EmailSettings.objects.count()
            templates_count = EmailTemplate.objects.count()
            logs_count = EmailLog.objects.count()
            
            print(f"   ‚úÖ EmailSettings: {settings_count} configuration(s)")
            print(f"   ‚úÖ EmailTemplate: {templates_count} template(s)")
            print(f"   ‚úÖ EmailLog: {logs_count} log(s)")
        except Exception as e:
            print(f"   ‚ùå Erreur mod√®les: {str(e)}")
            all_ready = False
        
        # 2. V√©rifier les templates
        print("\n2Ô∏è‚É£ V√©rification des templates...")
        required_templates = [
            'order_confirmation',
            'payment_confirmation', 
            'order_shipped',
            'order_delivered',
            'cart_reminder',
            'stock_alert'
        ]
        
        missing_templates = []
        for template_type in required_templates:
            try:
                template = EmailTemplate.objects.get(
                    template_type=template_type,
                    is_active=True
                )
                print(f"   ‚úÖ {template.name} ({template_type})")
            except EmailTemplate.DoesNotExist:
                print(f"   ‚ùå Template manquant: {template_type}")
                missing_templates.append(template_type)
                all_ready = False
        
        # 3. V√©rifier la configuration SMTP
        print("\n3Ô∏è‚É£ V√©rification de la configuration SMTP...")
        try:
            settings = EmailSettings.objects.first()
            if settings:
                print(f"   ‚úÖ Configuration trouv√©e")
                print(f"   üìß Serveur SMTP: {settings.smtp_host}:{settings.smtp_port}")
                print(f"   üìß Email: {settings.smtp_username}")
                print(f"   üìß TLS: {'Activ√©' if settings.use_tls else 'D√©sactiv√©'}")
                print(f"   üìß Syst√®me actif: {'Oui' if settings.is_active else 'Non'}")
                
                if not settings.smtp_username or not settings.smtp_password:
                    print(f"   ‚ö†Ô∏è  Configuration SMTP incompl√®te")
                    all_ready = False
            else:
                print(f"   ‚ùå Aucune configuration SMTP trouv√©e")
                all_ready = False
        except Exception as e:
            print(f"   ‚ùå Erreur configuration: {str(e)}")
            all_ready = False
        
        # 4. V√©rifier le service email
        print("\n4Ô∏è‚É£ V√©rification du service email...")
        try:
            email_service = get_email_service()
            if email_service:
                print(f"   ‚úÖ Service email initialis√©")
            else:
                print(f"   ‚ùå Service email non initialis√©")
                all_ready = False
        except Exception as e:
            print(f"   ‚ùå Erreur service email: {str(e)}")
            all_ready = False
        
        # 5. V√©rifier les templates HTML
        print("\n5Ô∏è‚É£ V√©rification des templates HTML...")
        try:
            from django.template.loader import get_template
            base_template = get_template('emails/base_email.html')
            print(f"   ‚úÖ Template de base trouv√©")
        except Exception as e:
            print(f"   ‚ùå Template de base manquant: {str(e)}")
            all_ready = False
        
        # 6. V√©rifier les URLs
        print("\n6Ô∏è‚É£ V√©rification des URLs...")
        try:
            from django.urls import reverse
            reverse('notifications:dashboard_emails')
            reverse('notifications:email_settings')
            print(f"   ‚úÖ URLs configur√©es")
        except Exception as e:
            print(f"   ‚ùå URLs manquantes: {str(e)}")
            all_ready = False
        
        # 7. V√©rifier les migrations
        print("\n7Ô∏è‚É£ V√©rification des migrations...")
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'notifications_%'")
                tables = cursor.fetchall()
                expected_tables = ['notifications_emailsettings', 'notifications_emailtemplate', 'notifications_emaillog']
                
                for table in expected_tables:
                    if (table,) in tables:
                        print(f"   ‚úÖ Table {table} existe")
                    else:
                        print(f"   ‚ùå Table {table} manquante")
                        all_ready = False
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification tables: {str(e)}")
            all_ready = False
        
        # R√©sum√© final
        print(f"\nüìä R√âSUM√â DE LA V√âRIFICATION")
        print("=" * 50)
        
        if all_ready:
            print("üéâ SYST√àME D'EMAILS PR√äT POUR LE D√âPLOIEMENT!")
            print("‚úÖ Tous les composants sont configur√©s")
            print("‚úÖ Vous pouvez d√©ployer en toute s√©curit√©")
        else:
            print("‚ö†Ô∏è  SYST√àME D'EMAILS NON PR√äT")
            print("‚ùå Des composants manquent ou sont mal configur√©s")
            print("üîß Ex√©cutez les commandes de correction ci-dessous")
        
        # Commandes de correction si n√©cessaire
        if not all_ready:
            print(f"\nüîß COMMANDES DE CORRECTION:")
            print("-" * 30)
            
            if missing_templates:
                print("1. Initialiser les templates:")
                print("   python manage.py init_email_templates")
            
            if not settings:
                print("2. Configurer SMTP:")
                print("   python configure_gmail_smtp.py")
            
            print("3. Appliquer les migrations:")
            print("   python manage.py migrate")
            
            print("4. V√©rifier √† nouveau:")
            print("   python check_email_system_ready.py")
        
        return all_ready
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("üìß V√âRIFICATION DU SYST√àME D'EMAILS")
    print("=" * 50)
    print("Ce script v√©rifie que le syst√®me d'emails est pr√™t pour le d√©ploiement")
    print("=" * 50)
    
    # Ex√©cuter la v√©rification
    is_ready = check_email_system_ready()
    
    if is_ready:
        print(f"\nüöÄ PR√äT POUR LE D√âPLOIEMENT!")
        print("=" * 50)
        print("‚úÖ Le syst√®me d'emails est enti√®rement configur√©")
        print("‚úÖ Vous pouvez d√©ployer sur le VPS")
        print("‚úÖ Les emails fonctionneront correctement")
    else:
        print(f"\n‚ö†Ô∏è  CORRECTIONS N√âCESSAIRES")
        print("=" * 50)
        print("‚ùå Le syst√®me d'emails n'est pas pr√™t")
        print("üîß Ex√©cutez les commandes de correction affich√©es ci-dessus")
    
    return is_ready

if __name__ == "__main__":
    is_ready = main()
    sys.exit(0 if is_ready else 1)
