#!/usr/bin/env python
"""
Script de test complet pour la PWA Maillots Football
Teste toutes les fonctionnalit√©s PWA impl√©ment√©es
"""

import os
import json
import requests
from pathlib import Path

def test_pwa_files():
    """Teste la pr√©sence et la validit√© des fichiers PWA"""
    print("üîç Test des fichiers PWA...")
    
    # Fichiers requis
    required_files = [
        'static/manifest.json',
        'static/sw.js',
        'static/browserconfig.xml',
        'static/css/pwa-mobile.css',
        'static/js/pwa.js',
        'templates/offline.html',
        'templates/core/home.html'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {missing_files}")
        return False
    
    print("‚úÖ Tous les fichiers PWA sont pr√©sents")
    return True

def test_manifest():
    """Teste la validit√© du manifest.json"""
    print("\nüìã Test du manifest.json...")
    
    try:
        with open('static/manifest.json', 'r', encoding='utf-8') as f:
            manifest = json.load(f)
        
        # Champs requis
        required_fields = [
            'name', 'short_name', 'description', 'start_url', 
            'display', 'background_color', 'theme_color', 'icons'
        ]
        
        missing_fields = []
        for field in required_fields:
            if field not in manifest:
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ùå Champs manquants dans le manifest: {missing_fields}")
            return False
        
        # V√©rifier les ic√¥nes
        icons = manifest.get('icons', [])
        if len(icons) < 3:
            print("‚ùå Pas assez d'ic√¥nes dans le manifest")
            return False
        
        # V√©rifier les tailles d'ic√¥nes
        required_sizes = ['192x192', '512x512']
        icon_sizes = [icon.get('sizes', '') for icon in icons]
        
        for size in required_sizes:
            if not any(size in icon_size for icon_size in icon_sizes):
                print(f"‚ùå Ic√¥ne {size} manquante")
                return False
        
        print("‚úÖ Manifest.json valide")
        print(f"   - Nom: {manifest['name']}")
        print(f"   - Nom court: {manifest['short_name']}")
        print(f"   - Mode d'affichage: {manifest['display']}")
        print(f"   - Couleur th√®me: {manifest['theme_color']}")
        print(f"   - Nombre d'ic√¥nes: {len(icons)}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur JSON dans le manifest: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du manifest: {e}")
        return False

def test_icons():
    """Teste la pr√©sence des ic√¥nes PWA"""
    print("\nüé® Test des ic√¥nes PWA...")
    
    icons_dir = Path('static/icons')
    if not icons_dir.exists():
        print("‚ùå Dossier icons manquant")
        return False
    
    # Tailles d'ic√¥nes requises
    required_icons = [
        'icon-72x72.png',
        'icon-96x96.png',
        'icon-128x128.png',
        'icon-144x144.png',
        'icon-152x152.png',
        'icon-192x192.png',
        'icon-384x384.png',
        'icon-512x512.png',
        'badge-72x72.png'
    ]
    
    missing_icons = []
    for icon in required_icons:
        icon_path = icons_dir / icon
        if not icon_path.exists():
            missing_icons.append(icon)
        else:
            print(f"‚úÖ {icon}")
    
    if missing_icons:
        print(f"‚ùå Ic√¥nes manquantes: {missing_icons}")
        return False
    
    print("‚úÖ Toutes les ic√¥nes PWA sont pr√©sentes")
    return True

def test_service_worker():
    """Teste le service worker"""
    print("\n‚öôÔ∏è Test du service worker...")
    
    try:
        with open('static/sw.js', 'r', encoding='utf-8') as f:
            sw_content = f.read()
        
        # Fonctionnalit√©s requises
        required_features = [
            'addEventListener',
            'install',
            'activate',
            'fetch',
            'push',
            'notificationclick',
            'sync'
        ]
        
        missing_features = []
        for feature in required_features:
            if feature not in sw_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Fonctionnalit√©s manquantes dans le SW: {missing_features}")
            return False
        
        # V√©rifier les strat√©gies de cache
        cache_strategies = [
            'cacheFirst',
            'networkFirst',
            'staleWhileRevalidate'
        ]
        
        for strategy in cache_strategies:
            if strategy not in sw_content:
                print(f"‚ö†Ô∏è Strat√©gie de cache '{strategy}' manquante")
        
        print("‚úÖ Service worker valide")
        print(f"   - Taille: {len(sw_content)} caract√®res")
        print(f"   - Fonctionnalit√©s: {len(required_features) - len(missing_features)}/{len(required_features)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du service worker: {e}")
        return False

def test_templates():
    """Teste les templates PWA"""
    print("\nüìÑ Test des templates PWA...")
    
    # Test du template offline
    try:
        with open('templates/offline.html', 'r', encoding='utf-8') as f:
            offline_content = f.read()
        
        required_elements = [
            'Hors ligne',
            'Service Worker',
            'navigator.onLine',
            'retryConnection'
        ]
        
        missing_elements = []
        for element in required_elements:
            if element not in offline_content:
                missing_elements.append(element)
        
        if missing_elements:
            print(f"‚ùå √âl√©ments manquants dans offline.html: {missing_elements}")
            return False
        
        print("‚úÖ Template offline.html valide")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture d'offline.html: {e}")
        return False
    
    # Test du template home
    try:
        with open('templates/core/home.html', 'r', encoding='utf-8') as f:
            home_content = f.read()
        
        required_elements = [
            'pwa-shortcuts',
            'installApp',
            'pwaManager',
            'display-mode: standalone'
        ]
        
        missing_elements = []
        for element in required_elements:
            if element not in home_content:
                missing_elements.append(element)
        
        if missing_elements:
            print(f"‚ùå √âl√©ments manquants dans home.html: {missing_elements}")
            return False
        
        print("‚úÖ Template home.html valide")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture de home.html: {e}")
        return False
    
    return True

def test_css():
    """Teste le CSS PWA"""
    print("\nüé® Test du CSS PWA...")
    
    try:
        with open('static/css/pwa-mobile.css', 'r', encoding='utf-8') as f:
            css_content = f.read()
        
        required_features = [
            'pwa-install-banner',
            'connection-status',
            'pwa-toast',
            'display-mode: standalone',
            'safe-area-inset',
            'touch-feedback'
        ]
        
        missing_features = []
        for feature in required_features:
            if feature not in css_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Fonctionnalit√©s CSS manquantes: {missing_features}")
            return False
        
        print("‚úÖ CSS PWA valide")
        print(f"   - Taille: {len(css_content)} caract√®res")
        print(f"   - Fonctionnalit√©s: {len(required_features) - len(missing_features)}/{len(required_features)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du CSS PWA: {e}")
        return False

def test_js():
    """Teste le JavaScript PWA"""
    print("\n‚ö° Test du JavaScript PWA...")
    
    try:
        with open('static/js/pwa.js', 'r', encoding='utf-8') as f:
            js_content = f.read()
        
        required_features = [
            'PWAManager',
            'registerServiceWorker',
            'installApp',
            'showNotification',
            'setupOfflineDetection',
            'beforeinstallprompt'
        ]
        
        missing_features = []
        for feature in required_features:
            if feature not in js_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Fonctionnalit√©s JS manquantes: {missing_features}")
            return False
        
        print("‚úÖ JavaScript PWA valide")
        print(f"   - Taille: {len(js_content)} caract√®res")
        print(f"   - Fonctionnalit√©s: {len(required_features) - len(missing_features)}/{len(required_features)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du JS PWA: {e}")
        return False

def test_urls():
    """Teste les URLs PWA"""
    print("\nüîó Test des URLs PWA...")
    
    try:
        with open('core/urls.py', 'r', encoding='utf-8') as f:
            urls_content = f.read()
        
        required_urls = [
            'pwa_manifest',
            'push_subscription',
            'offline_page',
            'service_worker'
        ]
        
        missing_urls = []
        for url in required_urls:
            if url not in urls_content:
                missing_urls.append(url)
        
        if missing_urls:
            print(f"‚ùå URLs manquantes: {missing_urls}")
            return False
        
        print("‚úÖ URLs PWA configur√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture des URLs: {e}")
        return False

def test_views():
    """Teste les vues PWA"""
    print("\nüëÅÔ∏è Test des vues PWA...")
    
    try:
        with open('core/views.py', 'r', encoding='utf-8') as f:
            views_content = f.read()
        
        required_views = [
            'pwa_manifest',
            'push_subscription',
            'offline_page',
            'service_worker'
        ]
        
        missing_views = []
        for view in required_views:
            if view not in views_content:
                missing_views.append(view)
        
        if missing_views:
            print(f"‚ùå Vues manquantes: {missing_views}")
            return False
        
        print("‚úÖ Vues PWA impl√©ment√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture des vues: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test complet de la PWA Maillots Football")
    print("=" * 50)
    
    tests = [
        test_pwa_files,
        test_manifest,
        test_icons,
        test_service_worker,
        test_templates,
        test_css,
        test_js,
        test_urls,
        test_views
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests PWA sont pass√©s avec succ√®s !")
        print("\n‚ú® Votre PWA est pr√™te ! Fonctionnalit√©s disponibles :")
        print("   üì± Installation sur mobile et desktop")
        print("   üîÑ Mode hors ligne avec cache intelligent")
        print("   üîî Notifications push")
        print("   ‚ö° Chargement rapide avec service worker")
        print("   üé® Interface mobile optimis√©e")
        print("   üìã Raccourcis d'application")
        print("   üîß Synchronisation en arri√®re-plan")
        
        print("\nüöÄ Prochaines √©tapes :")
        print("   1. Testez l'installation sur mobile")
        print("   2. V√©rifiez le mode hors ligne")
        print("   3. Configurez les notifications push")
        print("   4. Testez les raccourcis")
        
    else:
        print(f"‚ö†Ô∏è {total - passed} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
