"""
Commande Django pour synchroniser les statuts entre Order et Payment
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from orders.models import Order
from orders.sync_utils import get_status_consistency_report, sync_order_payment_status


class Command(BaseCommand):
    help = 'Synchronise les statuts entre les commandes et les paiements'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche les incoh√©rences sans les corriger',
        )
        parser.add_argument(
            '--fix',
            action='store_true',
            help='Corrige automatiquement les incoh√©rences',
        )
        parser.add_argument(
            '--order-id',
            type=int,
            help='Synchronise une commande sp√©cifique',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        fix = options['fix']
        order_id = options.get('order_id')

        if order_id:
            # Synchroniser une commande sp√©cifique
            self.sync_single_order(order_id, dry_run)
        else:
            # G√©n√©rer un rapport des incoh√©rences
            self.generate_report(dry_run, fix)

    def sync_single_order(self, order_id, dry_run):
        """Synchronise une commande sp√©cifique"""
        try:
            order = Order.objects.get(id=order_id)
            self.stdout.write(f"Synchronisation de la commande {order.order_number} (ID: {order_id})")
            
            if dry_run:
                self.stdout.write(self.style.WARNING("Mode dry-run: aucune modification effectu√©e"))
                return
            
            # Synchroniser le statut de paiement
            success = sync_order_payment_status(order, order.payment_status)
            
            if success:
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ Commande {order.order_number} synchronis√©e avec succ√®s")
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è Aucun paiement associ√© √† la commande {order.order_number}")
                )
                
        except Order.DoesNotExist:
            raise CommandError(f"Commande avec l'ID {order_id} non trouv√©e")

    def generate_report(self, dry_run, fix):
        """G√©n√®re un rapport des incoh√©rences"""
        self.stdout.write("üîç Analyse des incoh√©rences entre commandes et paiements...")
        
        inconsistencies = get_status_consistency_report()
        
        if not inconsistencies:
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Aucune incoh√©rence trouv√©e! Tous les statuts sont synchronis√©s.")
            )
            return
        
        self.stdout.write(
            self.style.WARNING(f"‚ö†Ô∏è {len(inconsistencies)} incoh√©rence(s) trouv√©e(s):")
        )
        
        for inconsistency in inconsistencies:
            self.stdout.write(f"""
üìã Commande {inconsistency['order_number']} (ID: {inconsistency['order_id']})
   Statut Order: {inconsistency['order_payment_status']}
   Statut Payment: {inconsistency['payment_status']}
   Statut attendu: {inconsistency['expected_payment_status']}
            """)
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING("Mode dry-run: aucune correction effectu√©e")
            )
            return
        
        if fix:
            self.stdout.write("üîß Correction des incoh√©rences...")
            fixed_count = 0
            
            with transaction.atomic():
                for inconsistency in inconsistencies:
                    try:
                        order = Order.objects.get(id=inconsistency['order_id'])
                        success = sync_order_payment_status(order, order.payment_status)
                        
                        if success:
                            fixed_count += 1
                            self.stdout.write(
                                f"‚úÖ Commande {order.order_number} corrig√©e"
                            )
                        else:
                            self.stdout.write(
                                self.style.WARNING(f"‚ö†Ô∏è Impossible de corriger la commande {order.order_number}")
                            )
                            
                    except Order.DoesNotExist:
                        self.stdout.write(
                            self.style.ERROR(f"‚ùå Commande {inconsistency['order_id']} non trouv√©e")
                        )
            
            self.stdout.write(
                self.style.SUCCESS(f"üéâ {fixed_count}/{len(inconsistencies)} incoh√©rence(s) corrig√©e(s)")
            )
        else:
            self.stdout.write(
                self.style.WARNING("Utilisez --fix pour corriger automatiquement les incoh√©rences")
            )
