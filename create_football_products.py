#!/usr/bin/env python
"""
Script de cr√©ation de produits de maillots de football
Cr√©e des produits d'exemple pour toutes les √©quipes import√©es
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

def create_football_products():
    """Cr√©e des produits de maillots pour toutes les √©quipes"""
    print("üõçÔ∏è CR√âATION DE PRODUITS DE MAILLOTS")
    print("=" * 60)
    
    try:
        from products.models import Product, Team, Category
        from decimal import Decimal
        
        # R√©cup√©rer la cat√©gorie
        category = Category.objects.get(name="Maillots de Football")
        
        # Types de produits √† cr√©er
        product_types = [
            {
                "name_suffix": "Domicile",
                "description_suffix": "domicile",
                "price": Decimal('15000.00'),
                "sale_price": Decimal('10000.00'),
                "slug_suffix": "domicile"
            },
            {
                "name_suffix": "Ext√©rieur",
                "description_suffix": "ext√©rieur",
                "price": Decimal('15000.00'),
                "sale_price": Decimal('1O000.00'),
                "slug_suffix": "exterieur"
            },
            {
                "name_suffix": "Troisi√®me",
                "description_suffix": "troisi√®me maillot",
                "price": Decimal('18000.00'),
                "sale_price": Decimal('10000.00'),
                "slug_suffix": "troisieme"
            }
        ]
        
        # R√©cup√©rer toutes les √©quipes
        teams = Team.objects.all().order_by('league', 'name')
        
        total_created = 0
        total_updated = 0
        
        for team in teams:
            print(f"\nüèÜ {team.name} ({team.league})")
            print("-" * 40)
            
            for product_type in product_types:
                # Cr√©er le nom du produit
                product_name = f"Maillot {team.name} {product_type['name_suffix']}"
                product_slug = f"maillot-{team.slug}-{product_type['slug_suffix']}"
                
                # Description du produit
                description = f"""Maillot officiel {product_type['description_suffix']} de {team.name} - Collection 2025/2026.


Tailles disponibles: S, M, L, XL, XXL
Couleurs: Couleurs officielles de {team.name}"""
                
                # Cr√©er ou mettre √† jour le produit
                product, created = Product.objects.get_or_create(
                    slug=product_slug,
                    defaults={
                        'name': product_name,
                        'description': description,
                        'price': product_type['price'],
                        'sale_price': product_type['sale_price'],
                        'category': category,
                        'team': team,
                        'stock_quantity': 30,
                        'available_sizes': ['S', 'M', 'L', 'XL', 'XXL'],
                        'is_featured': team.league in ['Ligue 1', 'La Liga', 'Bundesliga', 'Serie A', 'Premier League'],
                        'is_active': True
                    }
                )
                
                if created:
                    print(f"  ‚úÖ Cr√©√©: {product_name}")
                    total_created += 1
                else:
                    # Mettre √† jour les informations si n√©cessaire
                    updated = False
                    if product.name != product_name:
                        product.name = product_name
                        updated = True
                    if product.description != description:
                        product.description = description
                        updated = True
                    if product.price != product_type['price']:
                        product.price = product_type['price']
                        updated = True
                    if product.sale_price != product_type['sale_price']:
                        product.sale_price = product_type['sale_price']
                        updated = True
                    
                    if updated:
                        product.save()
                        print(f"  üîÑ Mis √† jour: {product_name}")
                        total_updated += 1
                    else:
                        print(f"  üìÅ Existe d√©j√†: {product_name}")
        
        print(f"\nüìä R√âSUM√â DE LA CR√âATION")
        print("=" * 40)
        print(f"‚úÖ Produits cr√©√©s: {total_created}")
        print(f"üîÑ Produits mis √† jour: {total_updated}")
        print(f"üìÅ Produits existants: {Product.objects.count() - total_created - total_updated}")
        print(f"üõçÔ∏è Total de produits: {Product.objects.count()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des produits: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def create_special_products():
    """Cr√©e des produits sp√©ciaux (maillots de gardien, accessoires)"""
    print(f"\nü•Ö CR√âATION DE PRODUITS SP√âCIAUX")
    print("=" * 60)
    
    try:
        from products.models import Product, Team, Category
        from decimal import Decimal
        
        # R√©cup√©rer la cat√©gorie
        category = Category.objects.get(name="Maillots de Football")
        
        # √âquipes populaires pour les produits sp√©ciaux
        popular_teams = [
            "psg", "real-madrid", "barcelona", "bayern-munich", 
            "juventus", "manchester-city", "arsenal", "liverpool",
            "om", "monaco", "ol", "lens"
        ]
        
        # Types de produits sp√©ciaux
        special_products = [
            {
                "name_suffix": "Gardien",
                "description_suffix": "gardien de but",
                "price": Decimal('18000.00'),
                "sale_price": Decimal('15000.00'),
                "slug_suffix": "gardien"
            },
            {
                "name_suffix": "Vintage",
                "description_suffix": "vintage r√©tro",
                "price": Decimal('20000.00'),
                "sale_price": Decimal('17000.00'),
                "slug_suffix": "vintage"
            }
        ]
        
        total_created = 0
        
        for team_slug in popular_teams:
            try:
                team = Team.objects.get(slug=team_slug)
                
                for product_type in special_products:
                    product_name = f"Maillot {team.name} {product_type['name_suffix']}"
                    product_slug = f"maillot-{team.slug}-{product_type['slug_suffix']}"
                    
                    description = f"""Maillot officiel {product_type['description_suffix']} de {team.name} - Collection 2024/2025.

Caract√©ristiques sp√©ciales:
‚Ä¢ Design unique et exclusif
‚Ä¢ Mat√©riau de haute qualit√©
‚Ä¢ Couleurs et logo officiels
‚Ä¢ Tissu technique performant
‚Ä¢ Lavage en machine √† 30¬∞C
‚Ä¢ Garantie qualit√© 30 jours

Tailles disponibles: S, M, L, XL, XXL"""
                    
                    product, created = Product.objects.get_or_create(
                        slug=product_slug,
                        defaults={
                            'name': product_name,
                            'description': description,
                            'price': product_type['price'],
                            'sale_price': product_type['sale_price'],
                            'category': category,
                            'team': team,
                            'stock_quantity': 20,
                            'available_sizes': ['S', 'M', 'L', 'XL', 'XXL'],
                            'is_featured': True,
                            'is_active': True
                        }
                    )
                    
                    if created:
                        print(f"  ‚úÖ Cr√©√©: {product_name}")
                        total_created += 1
                    else:
                        print(f"  üìÅ Existe d√©j√†: {product_name}")
                        
            except Team.DoesNotExist:
                print(f"  ‚ùå √âquipe non trouv√©e: {team_slug}")
                continue
        
        print(f"\nüìä PRODUITS SP√âCIAUX CR√â√âS: {total_created}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des produits sp√©ciaux: {str(e)}")
        return False

def show_products_summary():
    """Affiche un r√©sum√© des produits cr√©√©s"""
    print(f"\nüìã R√âSUM√â DES PRODUITS")
    print("=" * 60)
    
    try:
        from products.models import Product, Team, Category
        from django.db.models import Count
        
        # Statistiques g√©n√©rales
        total_products = Product.objects.count()
        total_teams = Team.objects.count()
        total_categories = Category.objects.count()
        
        print(f"üõçÔ∏è Produits totales: {total_products}")
        print(f"üèÜ √âquipes totales: {total_teams}")
        print(f"üìÅ Cat√©gories totales: {total_categories}")
        
        # Statistiques par championnat
        print(f"\nüèÜ PRODUITS PAR CHAMPIONNAT")
        print("-" * 40)
        leagues = ["Ligue 1", "La Liga", "Bundesliga", "Serie A", "Premier League"]
        for league in leagues:
            count = Product.objects.filter(team__league=league).count()
            print(f"  {league}: {count} produits")
        
        # Top 10 des √©quipes avec le plus de produits
        print(f"\nüåü TOP 10 √âQUIPES (par nombre de produits)")
        print("-" * 40)
        teams_with_products = Team.objects.annotate(
            product_count=Count('products')
        ).order_by('-product_count')[:10]
        
        for team in teams_with_products:
            print(f"  {team.name}: {team.product_count} produits")
        
        # Produits en promotion
        products_on_sale = Product.objects.filter(sale_price__isnull=False).count()
        print(f"\nüí∞ PRODUITS EN PROMOTION: {products_on_sale}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'affichage du r√©sum√©: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("üõçÔ∏è CR√âATION DE PRODUITS DE MAILLOTS")
    print("=" * 60)
    print("Ce script va cr√©er des produits de maillots pour toutes les √©quipes")
    print("Types de produits:")
    print("‚Ä¢ Maillots domicile")
    print("‚Ä¢ Maillots ext√©rieur")
    print("‚Ä¢ Maillots troisi√®me")
    print("‚Ä¢ Maillots gardien (√©quipes populaires)")
    print("‚Ä¢ Maillots vintage (√©quipes populaires)")
    print("=" * 60)
    
    # Demander confirmation
    response = input("\nVoulez-vous continuer ? (o/n): ").lower().strip()
    if response not in ['o', 'oui', 'y', 'yes']:
        print("‚ùå Cr√©ation annul√©e")
        return False
    
    # √âtape 1: Cr√©er les produits principaux
    success1 = create_football_products()
    
    if not success1:
        print("‚ùå √âchec de la cr√©ation des produits principaux")
        return False
    
    # √âtape 2: Cr√©er les produits sp√©ciaux
    response = input("\nVoulez-vous cr√©er des produits sp√©ciaux (gardien, vintage) ? (o/n): ").lower().strip()
    if response in ['o', 'oui', 'y', 'yes']:
        success2 = create_special_products()
        if not success2:
            print("‚ö†Ô∏è Erreur lors de la cr√©ation des produits sp√©ciaux")
    
    # √âtape 3: Afficher le r√©sum√©
    show_products_summary()
    
    print(f"\nüéâ CR√âATION TERMIN√âE!")
    print("=" * 60)
    print("‚úÖ Tous les produits ont √©t√© cr√©√©s")
    print("‚úÖ Vous pouvez maintenant ajouter les images des produits")
    print("‚úÖ Les prix et descriptions sont configur√©s")
    print("‚úÖ Votre catalogue de maillots est pr√™t!")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
