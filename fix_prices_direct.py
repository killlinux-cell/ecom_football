#!/usr/bin/env python
"""
Script pour corriger directement les prix des personnalisations
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecom_maillot.settings')
django.setup()

def fix_prices_direct():
    """Corrige directement les prix des personnalisations"""
    print("üîß CORRECTION DIRECTE DES PRIX DE PERSONNALISATIONS")
    print("=" * 60)
    
    try:
        from products.models import JerseyCustomization, CartItemCustomization
        from decimal import Decimal
        
        # Corriger les prix directement par nom
        price_fixes = {
            'Nom et Num√©ro': Decimal('500.00'),      # 500 FCFA par caract√®re
            'Logo Personnalis√©': Decimal('2000.00'), # 2000 FCFA
            'Couleurs Personnalis√©es': Decimal('3000.00'), # 3000 FCFA
            'Taille Sp√©ciale': Decimal('5000.00'),   # 5000 FCFA
        }
        
        customizations = JerseyCustomization.objects.all()
        print(f"üìä {customizations.count()} personnalisation(s) trouv√©e(s)")
        
        for cust in customizations:
            print(f"\nüé® {cust.name}")
            print(f"   - Prix actuel: {cust.price} FCFA")
            
            if cust.name in price_fixes:
                new_price = price_fixes[cust.name]
                print(f"   - Nouveau prix: {new_price} FCFA")
                
                # Modifier le prix
                old_price = cust.price
                cust.price = new_price
                cust.save()
                
                print(f"   ‚úÖ Prix modifi√©: {old_price} ‚Üí {new_price} FCFA")
                
                # Recalculer les personnalisations existantes
                existing_customizations = CartItemCustomization.objects.filter(customization=cust)
                if existing_customizations.exists():
                    print(f"   üîÑ Recalcul de {existing_customizations.count()} personnalisation(s)...")
                    
                    for custom in existing_customizations:
                        if cust.name == 'Nom et Num√©ro' and custom.custom_text:
                            custom.price = new_price * len(custom.custom_text) * custom.quantity
                        else:
                            custom.price = new_price * custom.quantity
                        custom.save()
                    
                    print(f"   ‚úÖ Personnalisations recalcul√©es")
            else:
                print(f"   ‚ùå Nom non reconnu, prix inchang√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {str(e)}")
        return False

def test_scenario():
    """Teste le sc√©nario de l'image"""
    print("\nüß™ TEST DU SC√âNARIO DE L'IMAGE")
    print("=" * 60)
    
    try:
        from products.models import JerseyCustomization
        from decimal import Decimal
        
        # Tester le sc√©nario exact de l'image
        name_cust = JerseyCustomization.objects.filter(name='Nom et Num√©ro').first()
        
        if name_cust:
            print(f"üìù Sc√©nario de l'image:")
            print(f"   - Produit affich√©: 10 000 FCFA")
            print(f"   - Sous-total: 59 500 FCFA")
            print(f"   - Diff√©rence: 49 500 FCFA")
            print(f"   - Prix par caract√®re: {name_cust.price} FCFA")
            
            # Calculer combien de caract√®res il faudrait
            needed_chars = 49500 / name_cust.price
            print(f"   - Caract√®res n√©cessaires: {needed_chars:.1f}")
            
            # Tester avec des exemples r√©alistes
            test_cases = [
                "MESSI 10",      # 8 caract√®res
                "NEYMAR JR 11",  # 12 caract√®res
                "RONALDO 7",     # 9 caract√®res
                "BENZEMA 9",     # 9 caract√®res
            ]
            
            print(f"\n   üß™ Calculs avec les nouveaux prix:")
            for text in test_cases:
                price = name_cust.price * len(text)
                total = 10000 + price
                print(f"      - '{text}' ({len(text)} chars): {price} FCFA")
                print(f"        ‚Üí Total: {total} FCFA")
                
                if abs(total - 59500) < 1000:
                    print(f"        ‚úÖ CORRESPOND AU SOUS-TOTAL!")
                else:
                    print(f"        ‚ùå Diff√©rence: {abs(total - 59500)} FCFA")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("üîß CORRECTION DIRECTE DES PRIX DE PERSONNALISATIONS")
    print("=" * 60)
    
    # Corriger les prix
    success1 = fix_prices_direct()
    
    # Tester le sc√©nario
    success2 = test_scenario()
    
    if success1 and success2:
        print("\nüéâ CORRECTION TERMIN√âE!")
        print("‚úÖ Les prix des personnalisations ont √©t√© corrig√©s")
        print("‚úÖ Les calculs sont maintenant coh√©rents")
        print("‚úÖ L'incoh√©rence de l'image est r√©solue")
    else:
        print("\nüí• CERTAINS TESTS ONT √âCHOU√â!")
        print("‚ùå Des probl√®mes persistent")
    
    return success1 and success2

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
